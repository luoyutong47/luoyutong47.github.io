<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小题笔记——农夫找牛c/c++</title>
    <link href="/2022/04/22/%E5%86%9C%E5%A4%AB%E6%89%BE%E7%89%9B/"/>
    <url>/2022/04/22/%E5%86%9C%E5%A4%AB%E6%89%BE%E7%89%9B/</url>
    
    <content type="html"><![CDATA[<p><mark>keyword：</mark><br />模拟<br />特征值</p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意：</h1><p>农夫需要在一张10*10的地图里抓牛。农夫和牛的移动规则相同：每次朝着原来的方向前进一格；如果前方是障碍物或者地图边界，那么本次顺时针旋转90°。初始方向向上。计算并输出农夫需要多少步才能抓到牛（二者在同一格相遇），<strong>永远不相遇则输出0</strong></p><p>•保证地图中只有一个F和一个C，且F和C一开始不会在同一个格子里<br />•如果农夫和牛在移动时穿过对方，但没有在同一格相遇，我们不认为他们相遇了</p><p><img src="../img/%E5%86%9C%E5%A4%AB%E6%89%BE%E7%89%9B.jpg" alt="题意解释图" /></p><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h1><ol><li><p>本题是一道典型的模拟题（也是常见的地图题），是很常见的用结构体记录横纵坐标以及下一步方向的方法。<strong>但是本来不会啊qaq所以还是要记下来</strong></p><ul><li>注：通常以第一个点为原点，向右向下建立坐标轴</li></ul></li><li><p>由于牛和农夫行走方式相同，写一个子函数实现行走/遇到障碍物转向的功能，传递结构体，返回值也是结构体</p></li><li><p>本题的特殊点在于<mark>如何判断永远不会相遇</mark>：</p><ul><li>不会相遇的情况：农夫在A<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，方向d1，牛在B<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_2,y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，方向d2，而之前出现过一个时刻与这情况完全相同</li><li>模拟方法：<strong>用特征值记录</strong>: 这里一共有六个值要记录，且均为个位数，则合在一起是一个六位数。如A(1,2) , d1=0, B(3,4), d2=1， 则special=120341。知道每个位数是多少，乘10的具体倍数就能得到special了。</li></ul></li></ol><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span><br><br>&#123;<br><br>    <span class="hljs-type">int</span> x;<br><br>    <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-type">int</span> d; <span class="hljs-comment">//朝向，0~3：上右下左（顺时针）</span><br><br>&#125; farmer, cow;<br><br><span class="hljs-comment">//地图是以向右为x轴正方向，向下为y轴正方向</span><br><br><span class="hljs-type">char</span> g[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>];     <span class="hljs-comment">// 地图grid</span><br><br><span class="hljs-type">bool</span> book[<span class="hljs-number">1000010</span>]; <span class="hljs-comment">//标记特征值</span><br><br>  <br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span> <span class="hljs-built_in">fun</span>(<span class="hljs-keyword">struct</span> Data p) <span class="hljs-comment">//处理转向</span><br><br>&#123;<br><br>    <span class="hljs-keyword">if</span> (p.d == <span class="hljs-number">0</span>)<br><br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (p.y - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span> &amp;&amp; g[p.y - <span class="hljs-number">1</span>][p.x] != <span class="hljs-string">&#x27;*&#x27;</span>)<span class="hljs-comment">//注意是&gt;不是&gt;=</span><br><br>            p.y--;<br><br>        <span class="hljs-keyword">else</span><br><br>            p.d = <span class="hljs-number">1</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.d == <span class="hljs-number">1</span>)<br><br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (p.x + <span class="hljs-number">1</span> &lt;= <span class="hljs-number">10</span> &amp;&amp; g[p.y][p.x + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>)<br><br>            p.x++;<br><br>        <span class="hljs-keyword">else</span><br><br>            p.d = <span class="hljs-number">2</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.d == <span class="hljs-number">2</span>)<br><br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (p.y + <span class="hljs-number">1</span> &lt;= <span class="hljs-number">10</span> &amp;&amp; g[p.y + <span class="hljs-number">1</span>][p.x] != <span class="hljs-string">&#x27;*&#x27;</span>)<br><br>            p.y++;<br><br>        <span class="hljs-keyword">else</span><br><br>            p.d = <span class="hljs-number">3</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.d == <span class="hljs-number">3</span>)<br><br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (p.x - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span> &amp;&amp; g[p.y][p.x - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>)<br><br>            p.x--;<br><br>        <span class="hljs-keyword">else</span><br><br>            p.d = <span class="hljs-number">0</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> p;<br><br>&#125;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)<span class="hljs-comment">//读入初始位置是（1,1）</span><br><br>    &#123;<br><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, g[i] + <span class="hljs-number">1</span>); <span class="hljs-comment">// 读入字符串，从下标1开始读入,按行迭代</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span>; j++)<br><br>        &#123;<br><br>            <span class="hljs-keyword">if</span> (g[i][j] == <span class="hljs-string">&#x27;F&#x27;</span>)<br><br>                farmer = &#123;j, i, <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//写入结构体</span><br><br>            <span class="hljs-keyword">if</span> (g[i][j] == <span class="hljs-string">&#x27;C&#x27;</span>)<br><br>                cow = &#123;j, i, <span class="hljs-number">0</span>&#125;;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br><br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (farmer.x == cow.x &amp;&amp; farmer.y == cow.y)<br><br>        &#123;<br><br>            flag = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-keyword">break</span>;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">int</span> special; <span class="hljs-comment">//特征值</span><br><br>        special = (farmer.x - <span class="hljs-number">1</span>) + (farmer.y - <span class="hljs-number">1</span>) * <span class="hljs-number">10</span> + farmer.d * <span class="hljs-number">100</span> + (cow.x - <span class="hljs-number">1</span>) * <span class="hljs-number">1000</span> + (cow.y - <span class="hljs-number">1</span>) * <span class="hljs-number">10000</span> + cow.d * <span class="hljs-number">100000</span>;<br>        <span class="hljs-comment">//减去1的原因是我们地图是从1开始录入的，而最大横/纵坐标为10就是两位数了。</span><br>        <span class="hljs-comment">//减1保证是个位数，且不影响特征值特征性</span><br><br>        <span class="hljs-keyword">if</span> (book[special])<br><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">else</span><br><br>            book[special] = <span class="hljs-literal">true</span>;<br><br>  <br><br>        farmer = <span class="hljs-built_in">fun</span>(farmer);<br><br>        cow = <span class="hljs-built_in">fun</span>(cow);<br><br>        cnt++;<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (flag)<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, cnt);<br><br>    <span class="hljs-keyword">else</span><br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h1><ol><li>在地图的细节处容易出错</li><li>学习了特征值在模拟中的作用</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>小题笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小题笔记——求排列中的稳定数个数c/c++</title>
    <link href="/2022/04/22/%E7%A8%B3%E5%AE%9A%E6%95%B0/"/>
    <url>/2022/04/22/%E7%A8%B3%E5%AE%9A%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><mark>key words：</mark><br />动态规划<br />递推算法</p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p><strong>对自然数1…n，求其全排列中有多少种排列P满足恰好有m个位置Pi&gt;i。</strong></p><h3 id="输入数据"><a class="markdownIt-Anchor" href="#输入数据"></a> 输入数据</h3><p>共一行，两个正整数n(1≤n≤100)，m(1≤m≤n )。</p><h3 id="输出数据"><a class="markdownIt-Anchor" href="#输出数据"></a> 输出数据</h3><p>一个整数，满足条件的排列数，需对1e9+7取模后输出</p><h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h3><p>1到5的排列P:5，4，3，2，1有2个位置P1，P2满足Pi&gt;i。</p><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析：</h3><p>想办法将题意含有的数字表示出来。</p><h5 id="对状态转移方程做一些阐述"><a class="markdownIt-Anchor" href="#对状态转移方程做一些阐述"></a> 对状态转移方程做一些阐述：</h5><p><strong>D[n][m]表示从i的全排列中有j个位置满足值大于下标。</strong></p><p>那么状态转移方程为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo>=</mo><mi>D</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><mi>D</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>∗</mo><mo stretchy="false">[</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D[n][m]=D[n-1][m]*(1+m)+D[n-1]*[m-1](n-m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></p><h6 id="对每一项进行分析"><a class="markdownIt-Anchor" href="#对每一项进行分析"></a> 对每一项进行分析：</h6><ul><li>第一项：前面n-1项已经满足了有m个稳定数的要求了，那么第n个数可以就放在n位，或者和前面m个稳定数中的任何一个（如k）交换</li><li>第二项：前面n-1项不满足要求，需要将n与某个非稳定的k交换才可以，而这样的操作能增加一个稳定数，故前面n-1共有m-1个稳定数。k有(n-1-(m-1))种选择。</li></ul><p><img src="../img/exchange.jpg" alt="讲解图" /></p><h6 id="初始条件"><a class="markdownIt-Anchor" href="#初始条件"></a> 初始条件：</h6><ul><li>m==0的时候只有一种情况，即按顺序。故D[i][0]==1</li><li>m==n-1的时候只有一种情况，即1放在最尾，其它依次前移。故D[i][i-1]==1</li><li>用循环赋予初值</li></ul><h6 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出：</h6><p>D中储存的就是答案了，直接输出即可</p><h5 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> D[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>];<br><br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br> <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,m;<br><br> cin&gt;&gt;n&gt;&gt;m;<br><br> <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><br> D[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//一个稳定数都没有，只有可能顺排</span><br><br> D[i][i<span class="hljs-number">-1</span>]=<span class="hljs-number">1</span>;<br><br> <span class="hljs-comment">//只有一个不是稳定数，只有可能1放在最尾，其他依次往前一个</span><br><br> &#125;<br><br> <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><br> <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> m=<span class="hljs-number">1</span>;m&lt;=i<span class="hljs-number">-2</span>;m++)<span class="hljs-comment">//i个数，最多i-1个稳定数，但i-1算了，只需要i-2开始</span><br><br> D[i][m]=((D[i<span class="hljs-number">-1</span>][m]+D[i<span class="hljs-number">-1</span>][m]*m)%mod+(D[i<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>]*(i-m))%mod)%mod;<br><br> cout&lt;&lt;D[n][m];<br><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>小题笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小题笔记——走方格c/c++</title>
    <link href="/2022/04/22/%E8%B5%B0%E6%96%B9%E6%A0%BC/"/>
    <url>/2022/04/22/%E8%B5%B0%E6%96%B9%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p><mark>keyword：</mark><br />模拟、数学规律</p><p><em>（但是这个题用模拟不对）</em></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>走到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_2,y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>点(均是整数)，每步能走一个单位长度，只能沿平行于坐标轴的方向运动，每走一步需要向左或向右旋转90°，求最少需要走多少步。<br />所有坐标满足−10000≤x,y≤10000.</p><h1 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h1><p><img src="../img/%E8%B5%B0%E6%A0%BC%E5%AD%90.jpg" alt="示例" /></p><ul><li>移动过程可以分为两个部分：<ul><li>未到达与C点横平或者竖直的时候：由于每走一步都要拐弯，所以可以等效为直接45°走。则走的步数就是B点的横/纵坐标-A点的横/纵坐标，求绝对值之和cnt。</li><li>到达与C横平或竖直的B点之后： 分类讨论（<strong>举例抓出奇偶性规律</strong>）（假设水平/竖直差为d)<ul><li>d为奇数：cnt+=2*d-1</li><li>d 为偶数：cnt+=2d</li></ul></li></ul></li></ul><p><strong>分类原因</strong>：见错误思路记录</p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span><br><br>&#123;<br><br>    <span class="hljs-type">int</span> a;<br><br>    <span class="hljs-type">int</span> b;<br><br>&#125; dot1, dot2;<br><br>ll t1, t2, ans, d,first;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    cin &gt;&gt; dot1.a &gt;&gt; dot1.b &gt;&gt; dot2.a &gt;&gt; dot2.b;<br><br>    t1 = <span class="hljs-built_in">abs</span>(dot1.a - dot2.a);<br><br>    t2 = <span class="hljs-built_in">abs</span>(dot1.b - dot2.b);<br><br>    first = <span class="hljs-built_in">min</span>(t1, t2);<span class="hljs-comment">//横平竖直选一个短的走</span><br><br>    ans = first*<span class="hljs-number">2</span>;<br><br>    d = <span class="hljs-built_in">max</span>(t1, t2) - first;<br><br>    <span class="hljs-comment">//假设平齐了，其实是要减去已经走了的横坐标，但是因为是45°所以直接减first</span><br><br>    <span class="hljs-keyword">if</span>(d%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br><br>        ans += d * <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">else</span><br><br>        ans += d * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="错误记录"><a class="markdownIt-Anchor" href="#错误记录"></a> 错误记录</h1><p>本来采用了模拟的思路。第一步通过比较出发点和结束点的横纵坐标来确定。如果前一步是上下，则后一次是左右，具体左右根据所在点和结尾点的横坐标大小比较来确定。<br />这貌似没问题，当时也花了很多时间在找原因。其实从例图来看就知道，如果第一步走上，则不是最短的。走到B点会发现没法向右走。<br /><strong>即</strong>：当中途达到与结果点相平行或竖直的点处，如果间隔d是奇数，则下一步必须是朝着结果点方向的。而这就要求前一步必须与结果点方向垂直，不能是任意的。按原先的计算方式是可能实现不了这个特殊要求。</p><h1 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h1><ul><li>模拟确实是解决很多题的一个方式，但是归纳数学式子往往是更多算法题的思路。</li><li>可以通过将过程分段，设置特殊节点的方式，然后人工走程序的逻辑，来查出错误。（因为分段了，所以点可以拉的远一点，也不怕乱）</li><li>另外，在写笔记的时候弄错了插入图片的相对路径表达。使用…/表示返回上一级目录。./表示同级目录。</li><li>特别鸣谢npy提供例图</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>小题笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记</title>
    <link href="/2022/04/05/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/05/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>跟随课堂作业进度写的笔记，主要是自己需要用的。旁边有目录。</p><span id="more"></span><h2 id="对列表"><a class="markdownIt-Anchor" href="#对列表"></a> 对列表</h2><h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> set()</h3><p>set()函数创建一个无序<strong>不重复</strong>元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><h3 id="add"><a class="markdownIt-Anchor" href="#add"></a> add()</h3><p>add() 方法用于给集合添加元素，<strong>如果添加的元素在集合中已存在，则不执行任何操作</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br>x = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(x)&lt;<span class="hljs-number">20</span>:<br>    x.add(randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>))<br>    <span class="hljs-comment">#这样创建的就是没有重复量的了，很方便，不用自己再加判断</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(x))<br><br></code></pre></td></tr></table></figure><h3 id="remove"><a class="markdownIt-Anchor" href="#remove"></a> remove()</h3><p>删除特定值，且删除的是第一个匹配项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">aList = [<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;xyz&#x27;</span>, <span class="hljs-string">&#x27;zara&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;xyz&#x27;</span>];<br><br>aList.remove(<span class="hljs-string">&#x27;xyz&#x27;</span>);<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;List : &quot;</span>, aList;<br>aList.remove(<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;List : &quot;</span>, aList;<br><br><span class="hljs-comment">#List :  [123, &#x27;zara&#x27;, &#x27;abc&#x27;, &#x27;xyz&#x27;]</span><br><span class="hljs-comment">#List :  [123, &#x27;zara&#x27;, &#x27;xyz&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> reverse()</h3><p>用于反向列表中元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">aList = [<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;xyz&#x27;</span>, <span class="hljs-string">&#x27;zara&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;xyz&#x27;</span>]<br><br>aList.reverse()<span class="hljs-comment">#注意：不可以写成alist=alist.reverse()，这样得到的是返回值None</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;List : &quot;</span>, aList)<br><span class="hljs-comment">#结果：</span><br><span class="hljs-comment">#List :  [&#x27;xyz&#x27;, &#x27;abc&#x27;, &#x27;zara&#x27;, &#x27;xyz&#x27;, 123]</span><br></code></pre></td></tr></table></figure><hr /><h2 id="对字典"><a class="markdownIt-Anchor" href="#对字典"></a> 对字典</h2><h3 id="__contains__key"><a class="markdownIt-Anchor" href="#__contains__key"></a> __contains__(key)</h3><p>在判断一个字典dict是否包含某个键值item，可以使用的是if item in dict.keys():。而字典比较大的时候会出现耗时严重的情况，于是改成**if dict.__contains__(item)：**速度会变快很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>:<span class="hljs-string">&#x27;coco&#x27;</span>,<span class="hljs-string">&#x27;Sex&#x27;</span>:<span class="hljs-string">&#x27;Female&#x27;</span>&#125;  <span class="hljs-comment"># 定义字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>.__contains__(<span class="hljs-string">&#x27;Name&#x27;</span>))   <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><hr /><h2 id="itertools-模块"><a class="markdownIt-Anchor" href="#itertools-模块"></a> itertools 模块</h2><h3 id="cycle"><a class="markdownIt-Anchor" href="#cycle"></a> cycle()</h3><ul><li>函数仅接受一个参数作为输入，可以像列表，字符串，元组等</li><li>该函数返回<strong>迭代器对象类型</strong></li><li>在函数的实现中，返回类型为yield，它在不破坏局部变量的情况下挂起函数执行。由生成中间结果的生成器使用</li><li>它遍历输入自变量中的每个元素并产生它并<strong>重复循环</strong>，<strong>并产生一个无穷大的自变量序列</strong></li></ul><p>相关链接：<a href="https://blog.csdn.net/u013066730/article/details/114278749">【Python】Itertools.cycle()用法及代码示例</a></p><h3 id="compress"><a class="markdownIt-Anchor" href="#compress"></a> compress()</h3><p>此迭代器根据作为其他参数传递的布尔列表值有选择地从传递的容器中选择要打印的值。打印与布尔值true相对应的参数，否则将全部跳过。</p><p>在此，我们为函数提供两个参数。第一个参数将是迭代器，第二个参数将是选择器<code>True/1</code>或者<code>False/0</code>。如果第一个参数的对应选择器是<code>True</code>，则将打印相应的数据，然后我们将得到相应的输出。</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">compress(<span class="hljs-built_in">iter</span>, selector)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>)<br>y = (<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)*<span class="hljs-number">9</span>+(<span class="hljs-number">1</span>,)<span class="hljs-comment">#*9代表着复制九次</span><br><span class="hljs-comment">#y打印出来是(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1)</span><br><span class="hljs-built_in">list</span>(itertools.compress(x, y)) <br><span class="hljs-comment">#list打印出来是：[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]</span><br></code></pre></td></tr></table></figure><h3 id="groupby"><a class="markdownIt-Anchor" href="#groupby"></a> groupby（）</h3><p>相关链接：<a href="https://blog.csdn.net/qq_38237214/article/details/111597534">itertools中的groupby()的原理及其操作</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">group</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">if</span> v&gt;<span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;greater than 10&#x27;</span><br>    <span class="hljs-keyword">elif</span> v&lt;<span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;less than 5&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;between 5 and 10&#x27;</span><br>x = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment">#1,4,7,10,13,16,19</span><br>y = itertools.groupby(x, group)     <span class="hljs-comment">#根据函数返回值对序列元素进行分组</span><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> y:<br>    <span class="hljs-built_in">print</span>(k, <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-built_in">list</span>(v))<br><span class="hljs-comment">#k里面存的是group的返回值</span><br><span class="hljs-comment">#v存的是对应的x</span><br><span class="hljs-comment">#每提取一次，都是对新的值进行一次分类判断</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果：</span><br><span class="hljs-string">less than 5 : [1, 4]</span><br><span class="hljs-string">between 5 and 10 : [7, 10]    </span><br><span class="hljs-string">greater than 10 : [13, 16, 19]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr /><h2 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h2><p>指能够被内置函数<code>next</code>调用并不断返回下一个值，直到最后抛出<code>StopIteration</code>错误表示无法继续返回下一个值的对象称为迭代器(<code>Iterator</code>)</p><p>相关链接：[Python内置类型(5)–迭代器类型](<a href="https://www.cnblogs.com/sesshoumaru/p/python-iterator.html#:~:text=Python%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B">https://www.cnblogs.com/sesshoumaru/p/python-iterator.html#:~:text=Python内置类型</a> (5)–迭代器类型. 指能够被内置函数 next 调用并不断返回下一个值，直到最后抛出 StopIteration 错误表示无法继续返回下一个值的对象称为迭代器,( Iterator) 其实以上的说法只是侠义上的迭代器的定义，在python中，迭代器还需要实现可迭代接口 ( Iterable )，可迭代接口需要返回的是一个迭代器对象，这样迭代器就能够被 for 语句进行迭代。.)</p><p><strong>可以理解成一个指针</strong></p><p>另外，<code>for</code>循环每执行一次即相当于调用了一次<code>next(iterator)</code>方法，直到捕获到<code>StopIteration</code>异常退出循环。</p><p>写程序理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br>x=<span class="hljs-string">&quot;abcdefg&quot;</span><br>y=itertools.cycle(x)<span class="hljs-comment">#返回的应该是一个迭代器类型的</span><br>i=<span class="hljs-number">1</span><br>ch0=<span class="hljs-built_in">next</span>(y)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ch0=&quot;</span>,ch0)<br><span class="hljs-keyword">for</span> ch1 <span class="hljs-keyword">in</span> y:<br>    i+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(ch1,end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">#跳出时，i==11,ch1==d</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n——————&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    ch2=<span class="hljs-built_in">next</span>(y)<br>    <span class="hljs-built_in">print</span>(ch2,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>  <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出：</span><br><span class="hljs-string">ch0= a</span><br><span class="hljs-string">b c d e f g a b c</span><br><span class="hljs-string">——————</span><br><span class="hljs-string">e f g a b c d e f g</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>由以上可以发现，用了next(y)可以这样理解：next是在调用的时候才往下跳，取一个新的值。最初始在第一个值之前，当第一次调用了next的时候就跳到第一个值。next或者for（本质也是next）移动取值了之后的效果是保存的，就像指针移动了之后指向的是操作后的地方。如例子中ch0读了y的第一个值a后，ch1就是从第二个值b开始读了</p><h3 id="创建可迭代对象iter函数"><a class="markdownIt-Anchor" href="#创建可迭代对象iter函数"></a> 创建可迭代对象：iter()函数</h3><p>相关链接：<a href="https://blog.csdn.net/weixin_38705903/article/details/102870485">【Python】iter()用途及如何创建一个可迭代的对象_</a></p><p>（注意上面链接关于类型的判断）</p><hr /><h2 id="对字符串"><a class="markdownIt-Anchor" href="#对字符串"></a> 对字符串</h2><h3 id="find"><a class="markdownIt-Anchor" href="#find"></a> find()</h3><p>检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.find(<span class="hljs-built_in">str</span>, beg=<span class="hljs-number">0</span>, end=<span class="hljs-built_in">len</span>(string))<br><span class="hljs-comment">#str -- 指定检索的字符串</span><br><span class="hljs-comment">#beg -- 开始索引，默认为0。</span><br><span class="hljs-comment">#end -- 结束索引，默认为字符串的长度。</span><br><br>a=<span class="hljs-string">&#x27;hello,world.&#x27;</span><br><span class="hljs-built_in">print</span> a.find(<span class="hljs-string">&quot;o,&quot;</span>)<br><span class="hljs-comment">#输出：4</span><br><br><span class="hljs-comment">#单纯判断有没有可以不用函数，比如：</span><br>b=<span class="hljs-string">&#x27;abcde&#x27;</span><br><span class="hljs-string">&#x27;ab&#x27;</span> <span class="hljs-keyword">in</span> b<br><span class="hljs-comment">#输出：True</span><br></code></pre></td></tr></table></figure><h3 id="join"><a class="markdownIt-Anchor" href="#join"></a> join()</h3><p>用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;-&quot;</span>;<br>seq = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<span class="hljs-comment"># 字符串序列</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>.join( seq )<br><span class="hljs-comment">#输出是a-b-c</span><br><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;*&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))))<span class="hljs-comment">#输出5的阶乘</span><br></code></pre></td></tr></table></figure><h3 id="count"><a class="markdownIt-Anchor" href="#count"></a> count()</h3><p>用于统计字符串里某个字符或子字符串出现的次数。可选参数为在字符串搜索的开始与结束位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.count(sub, start= <span class="hljs-number">0</span>,end=<span class="hljs-built_in">len</span>(string))<br></code></pre></td></tr></table></figure><ul><li>sub – 搜索的子字符串</li><li>start – 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li><li>end – 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li></ul><h3 id="swapcase"><a class="markdownIt-Anchor" href="#swapcase"></a> swapcase()</h3><p>将字符串大小写互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.swapcase()<br></code></pre></td></tr></table></figure><h3 id="replace"><a class="markdownIt-Anchor" href="#replace"></a> replace()</h3><p>把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p><p>(注意，更改的不是原字符串，而是str指向的内容，字符串是不可更改的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;this is string example....wow!!! this is really string&quot;</span>;<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;was&quot;</span>);<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;was&quot;</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">#输出：</span><br><span class="hljs-comment">#thwas was string example....wow!!! thwas was really string</span><br><span class="hljs-comment">#thwas was string example....wow!!! thwas is really string</span><br></code></pre></td></tr></table></figure><h3 id="endswith"><a class="markdownIt-Anchor" href="#endswith"></a> endswith()</h3><p>用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数&quot;start&quot;与&quot;end&quot;为检索字符串的开始与结束位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.endswith(suffix[, start[, end]])<br></code></pre></td></tr></table></figure><ul><li>suffix – 该参数可以是一个字符串或者是一个元素。</li><li>start – 字符串中的开始位置。</li><li>end – 字符中结束位置。</li></ul><p>可用于<strong>判断文件名后缀</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fileName=<span class="hljs-string">&#x27;hello.jpg&#x27;</span><br>fileEnd=<span class="hljs-string">&#x27;jpg&#x27;</span><br><span class="hljs-built_in">print</span>(fileName.endswith(fileEnd))<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>相对应的是startswith()</p><h3 id="resplit"><a class="markdownIt-Anchor" href="#resplit"></a> re.split()</h3><p>一次加入多个分割条件</p><p>形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>re.split(pattern, string[, maxsplit=<span class="hljs-number">0</span>, flags=<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>pattern:匹配的字符串(可使用正则表达式）<br />string:需要切分的字符串<br />maxsplit:分隔次数，默认为0(即不限次数)<br />flags:标志位，用于控制正则表达式的匹配方式，比如：是否区分大小写</p><p><strong>正则表达式</strong>表见链接：<a href="https://blog.csdn.net/qq_31672701/article/details/100711585">正则表达式</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>s=<span class="hljs-string">&#x27;abc,  abc,  defg,  dds&#x27;</span><br>re.split(<span class="hljs-string">&#x27;\W+&#x27;</span>,s) <span class="hljs-comment"># \W匹配任何非单词字符</span><br><span class="hljs-comment">#结果：[&#x27;abc&#x27;, &#x27;abc&#x27;, &#x27;defg&#x27;, &#x27;dds&#x27;]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>s=<span class="hljs-string">&#x27;abc,  abc,  defg,  dds&#x27;</span><br>re.split(<span class="hljs-string">&#x27;(\W+)&#x27;</span>,s) <span class="hljs-comment"># 如果加上了括号，返回值会包括剔除的部分</span><br><span class="hljs-comment">#结果：[&#x27;abc&#x27;, &#x27;,  &#x27;, &#x27;abc&#x27;, &#x27;,  &#x27;, &#x27;defg&#x27;, &#x27;,  &#x27;, &#x27;dds&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="isdigit"><a class="markdownIt-Anchor" href="#isdigit"></a> isdigit()</h3><p>判断一个字符串是否只含有数字/一个字符是否为数字,是则返回True，不是则返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">password=<span class="hljs-string">&#x27;hello1234HHH&#x27;</span><br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> password: <span class="hljs-comment">#这样就可以用每个字母了</span><br>    <span class="hljs-keyword">if</span> ch.isdigit():<br>        digitN=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>同类的还有：**isupper()**判断是否是大写，**islower()**判断是否是小写</p><hr /><h2 id="运算"><a class="markdownIt-Anchor" href="#运算"></a> 运算</h2><h3 id="mathsqrt"><a class="markdownIt-Anchor" href="#mathsqrt"></a> math.sqrt()</h3><p>其实就是开根号，但是要import math，并且使用的时候不能单独一个sqrt</p><h3 id="reduce"><a class="markdownIt-Anchor" href="#reduce"></a> reduce()</h3><p>对参数序列中元素进行累积。</p><p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的<strong>函数 <strong>function（有两个参数）先对集合中的第 1、2 个元素</strong>进行操作</strong>，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce <span class="hljs-comment">#需要导入模块functools</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) :            <span class="hljs-comment"># 两数相加</span><br>    <span class="hljs-keyword">return</span> x + y<br>sum1 = reduce(add, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])   <span class="hljs-comment"># 计算列表和：1+2+3+4+5</span><br>sum2 = reduce(<span class="hljs-keyword">lambda</span> x, y: x+y, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])  <span class="hljs-comment"># 使用 lambda 匿名函数</span><br><span class="hljs-built_in">print</span>(sum1)<br><span class="hljs-built_in">print</span>(sum2)<br><span class="hljs-comment">#结果：15\n15</span><br></code></pre></td></tr></table></figure><h3 id="cmp"><a class="markdownIt-Anchor" href="#cmp"></a> cmp()</h3><p>cmp(x,y) 函数用于比较2个对象，如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。</p><h3 id="lambda"><a class="markdownIt-Anchor" href="#lambda"></a> lambda()</h3><p>有点像#define一个格式的感觉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> arguments : expression<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a : a + <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">7</span>))<br><span class="hljs-comment"># 17</span><br></code></pre></td></tr></table></figure><hr /><h2 id="其他函数"><a class="markdownIt-Anchor" href="#其他函数"></a> 其他函数</h2><h3 id="isintance"><a class="markdownIt-Anchor" href="#isintance"></a> isintance()</h3><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 <strong>type()</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">object</span>, classinfo)<br></code></pre></td></tr></table></figure><ul><li>object – 实例对象。</li><li>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</li></ul><blockquote><p>isinstance() 与 type() 区别：</p><ul><li><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p></li><li><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p></li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">isinstance</span>(A(), A)    <span class="hljs-comment"># returns True</span><br><span class="hljs-built_in">type</span>(A()) == A        <span class="hljs-comment"># returns True</span><br><span class="hljs-built_in">isinstance</span>(B(), A)    <span class="hljs-comment"># returns True</span><br><span class="hljs-built_in">type</span>(B()) == A        <span class="hljs-comment"># returns Fals</span><br></code></pre></td></tr></table></figure><h3 id="bool"><a class="markdownIt-Anchor" href="#bool"></a> bool()</h3><p>bool()函数用于将给定参数转换为布尔类型，如果没有参数，返回 False。</p><p>bool 是 int 的子类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span>))<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>扩展：<strong>布尔类型</strong></p><p>Python 中布尔值使用常量 True 和 False 来表示。</p><p>1、在数值上下文环境中，True被当作 1，False 被当作0</p><p>2、其他类型值转换 bool 值时除了 ‘’、&quot;&quot;、’’’’’’、&quot;&quot;&quot;&quot;&quot;&quot;、0、()、[]、{}、None、0.0、0L、0.0+0.0j、False*为 False外，其他都为 True</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
